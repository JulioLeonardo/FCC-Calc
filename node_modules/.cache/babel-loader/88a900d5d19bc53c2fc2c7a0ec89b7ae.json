{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juleo\\\\OneDrive\\\\Documentos\\\\JavascriptCalculatorFCC\\\\src\\\\app.js\";\nimport React from 'react';\nimport Display from './components/display';\nimport Keypad from './components/keypad';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.buttonsObject = [{\n      id: \"one\",\n      name: \"1\",\n      type: \"number\"\n    }, {\n      id: \"two\",\n      name: \"2\",\n      type: \"number\"\n    }, {\n      id: \"three\",\n      name: \"3\",\n      type: \"number\"\n    }, {\n      id: \"four\",\n      name: \"4\",\n      type: \"number\"\n    }, {\n      id: \"five\",\n      name: \"5\",\n      type: \"number\"\n    }, {\n      id: \"six\",\n      name: \"6\",\n      type: \"number\"\n    }, {\n      id: \"seven\",\n      name: \"7\",\n      type: \"number\"\n    }, {\n      id: \"eight\",\n      name: \"8\",\n      type: \"number\"\n    }, {\n      id: \"nine\",\n      name: \"9\",\n      type: \"number\"\n    }, {\n      id: \"zero\",\n      name: \"0\",\n      type: \"number\"\n    }, {\n      id: \"decimal\",\n      name: \".\",\n      type: \"decimal\"\n    }, {\n      id: \"add\",\n      name: \"+\",\n      type: \"operator\"\n    }, {\n      id: \"subtract\",\n      name: \"-\",\n      type: \"operator\"\n    }, {\n      id: \"multiply\",\n      name: \"*\",\n      type: \"operator\"\n    }, {\n      id: \"divide\",\n      name: \"/\",\n      type: \"operator\"\n    }, {\n      id: \"clear\",\n      name: \"C\",\n      type: \"clear\"\n    }, {\n      id: \"equals\",\n      name: \"=\",\n      type: \"equal\"\n    }];\n\n    this.handleButtonClick = btn => {\n      let currInput = this.state.input;\n      let currResult = this.state.result;\n\n      switch (true) {\n        case btn.type === \"number\":\n          if (currInput !== \"0\") {\n            currInput += btn.name;\n            this.setState({\n              input: currInput,\n              numOp: 0\n            });\n          } else {\n            this.setState({\n              input: btn.name\n            });\n          }\n\n          break;\n\n        case btn.type === \"operator\":\n          let numOps = this.state.numOp;\n          this.setState({\n            numOp: this.state.numOp + 1\n          });\n          let prevOp = currInput[currInput.length - 1];\n          let currOp = btn.name;\n          let replaced = 0;\n          console.log(\" NumOp is\", numOps); //  console.log(\"Current NumOp is\", this.state.numOp);\n\n          console.log(\"previous op was\", prevOp);\n          console.log(\"current op is\", currOp);\n\n          if (numOps <= 0) {\n            console.log(\"num op is <= 0, just append\", numOps);\n            currInput += btn.name;\n            this.setState({\n              input: currInput,\n              decimalClicked: false\n            });\n          } else if (numOps === 1 && !Number.isInteger(parseInt(prevOp))) {\n            console.log(\"num op is == 1, do condition and replace\", numOps);\n\n            if (prevOp === \"-\" && currOp !== \"-\" || prevOp !== \"-\" && currOp !== \"-\" || prevOp === currOp) {\n              console.log('replace!!', prevOp);\n              const newInput = currInput.slice(0, currInput.length - 1);\n              currInput = newInput;\n              currInput += btn.name;\n            } else {\n              currInput += btn.name;\n              replaced = 1;\n            }\n\n            this.setState({\n              input: currInput,\n              decimalClicked: false,\n              numOp: this.state.numOp + replaced\n            });\n          } else if (numOps === 2) {\n            console.log(\"num op is === 2, do condition and replace\", numOps);\n\n            if (Number.isInteger(parseInt(currOp))) {\n              console.log(\"number\");\n            } else {\n              console.log(\"not number, replacing !!\");\n              const newInput = currInput.slice(0, currInput.length - 2);\n              currInput = newInput;\n              currInput += btn.name;\n              this.setState({\n                input: currInput,\n                decimalClicked: false,\n                numOp: 1\n              });\n            }\n          } else if (numOps > 2) {\n            console.log(\"num op is > 2 replace \", numOps);\n          }\n\n          break;\n\n        case btn.type === \"clear\":\n          this.setState({\n            input: \"0\",\n            result: \"0\",\n            numOp: 0,\n            decimalClicked: false\n          });\n          break;\n\n        case btn.type === \"equal\":\n          const evilResult = eval(currInput);\n          this.setState({\n            input: evilResult,\n            result: evilResult,\n            numOp: 0,\n            decimalClicked: false\n          });\n          break;\n\n        case btn.type === \"decimal\":\n          if (!this.state.decimalClicked) {\n            currInput += \".\";\n            this.setState({\n              input: currInput,\n              decimalClicked: true\n            });\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.state = {\n      input: \"0\",\n      result: \"0\",\n      numOp: 0,\n      decimalClicked: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 15\n      }\n    }, \"Calculator\"), /*#__PURE__*/React.createElement(Display, {\n      result: this.state.result,\n      input: this.state.input,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Keypad, {\n      buttons: this.buttonsObject,\n      handleButtonClickParent: this.handleButtonClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/juleo/OneDrive/Documentos/JavascriptCalculatorFCC/src/app.js"],"names":["React","Display","Keypad","App","Component","constructor","props","buttonsObject","id","name","type","handleButtonClick","btn","currInput","state","input","currResult","result","setState","numOp","numOps","prevOp","length","currOp","replaced","console","log","decimalClicked","Number","isInteger","parseInt","newInput","slice","evilResult","eval","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEE,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAqBhCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SApBnBC,aAoBmB,GApBH,CACd;AAAEC,MAAAA,EAAE,EAAE,KAAN;AAAaC,MAAAA,IAAI,EAAE,GAAnB;AAAwBC,MAAAA,IAAI,EAAE;AAA9B,KADc,EAEd;AAAEF,MAAAA,EAAE,EAAE,KAAN;AAAaC,MAAAA,IAAI,EAAE,GAAnB;AAAwBC,MAAAA,IAAI,EAAE;AAA9B,KAFc,EAGd;AAAEF,MAAAA,EAAE,EAAE,OAAN;AAAeC,MAAAA,IAAI,EAAE,GAArB;AAA0BC,MAAAA,IAAI,EAAE;AAAhC,KAHc,EAId;AAAEF,MAAAA,EAAE,EAAE,MAAN;AAAcC,MAAAA,IAAI,EAAE,GAApB;AAAyBC,MAAAA,IAAI,EAAE;AAA/B,KAJc,EAKd;AAAEF,MAAAA,EAAE,EAAE,MAAN;AAAcC,MAAAA,IAAI,EAAE,GAApB;AAAyBC,MAAAA,IAAI,EAAE;AAA/B,KALc,EAMd;AAAEF,MAAAA,EAAE,EAAE,KAAN;AAAaC,MAAAA,IAAI,EAAE,GAAnB;AAAwBC,MAAAA,IAAI,EAAE;AAA9B,KANc,EAOd;AAAEF,MAAAA,EAAE,EAAE,OAAN;AAAeC,MAAAA,IAAI,EAAE,GAArB;AAA0BC,MAAAA,IAAI,EAAE;AAAhC,KAPc,EAQd;AAAEF,MAAAA,EAAE,EAAE,OAAN;AAAeC,MAAAA,IAAI,EAAE,GAArB;AAA0BC,MAAAA,IAAI,EAAE;AAAhC,KARc,EASd;AAAEF,MAAAA,EAAE,EAAE,MAAN;AAAcC,MAAAA,IAAI,EAAE,GAApB;AAAyBC,MAAAA,IAAI,EAAE;AAA/B,KATc,EAUd;AAAEF,MAAAA,EAAE,EAAE,MAAN;AAAcC,MAAAA,IAAI,EAAE,GAApB;AAAyBC,MAAAA,IAAI,EAAE;AAA/B,KAVc,EAWd;AAAEF,MAAAA,EAAE,EAAE,SAAN;AAAiBC,MAAAA,IAAI,EAAE,GAAvB;AAA4BC,MAAAA,IAAI,EAAE;AAAlC,KAXc,EAYd;AAAEF,MAAAA,EAAE,EAAE,KAAN;AAAaC,MAAAA,IAAI,EAAE,GAAnB;AAAwBC,MAAAA,IAAI,EAAE;AAA9B,KAZc,EAad;AAAEF,MAAAA,EAAE,EAAE,UAAN;AAAkBC,MAAAA,IAAI,EAAE,GAAxB;AAA6BC,MAAAA,IAAI,EAAE;AAAnC,KAbc,EAcd;AAAEF,MAAAA,EAAE,EAAE,UAAN;AAAkBC,MAAAA,IAAI,EAAE,GAAxB;AAA6BC,MAAAA,IAAI,EAAE;AAAnC,KAdc,EAed;AAAEF,MAAAA,EAAE,EAAE,QAAN;AAAgBC,MAAAA,IAAI,EAAE,GAAtB;AAA2BC,MAAAA,IAAI,EAAE;AAAjC,KAfc,EAgBd;AAAEF,MAAAA,EAAE,EAAE,OAAN;AAAeC,MAAAA,IAAI,EAAE,GAArB;AAA0BC,MAAAA,IAAI,EAAE;AAAhC,KAhBc,EAiBd;AAAEF,MAAAA,EAAE,EAAE,QAAN;AAAgBC,MAAAA,IAAI,EAAE,GAAtB;AAA2BC,MAAAA,IAAI,EAAE;AAAjC,KAjBc,CAoBG;;AAAA,SAUnBC,iBAVmB,GAUCC,GAAG,IAAI;AACzB,UAAIC,SAAS,GAAG,KAAKC,KAAL,CAAWC,KAA3B;AACA,UAAIC,UAAU,GAAG,KAAKF,KAAL,CAAWG,MAA5B;;AAEA,cAAQ,IAAR;AACE,aAAKL,GAAG,CAACF,IAAJ,KAAa,QAAlB;AACE,cAAIG,SAAS,KAAK,GAAlB,EAAuB;AACrBA,YAAAA,SAAS,IAAID,GAAG,CAACH,IAAjB;AACA,iBAAKS,QAAL,CAAc;AACZH,cAAAA,KAAK,EAAEF,SADK;AAEZM,cAAAA,KAAK,EAAE;AAFK,aAAd;AAID,WAND,MAMO;AACL,iBAAKD,QAAL,CAAc;AACZH,cAAAA,KAAK,EAAEH,GAAG,CAACH;AADC,aAAd;AAGD;;AACD;;AACF,aAAKG,GAAG,CAACF,IAAJ,KAAa,UAAlB;AACE,cAAIU,MAAM,GAAG,KAAKN,KAAL,CAAWK,KAAxB;AACA,eAAKD,QAAL,CAAc;AACZC,YAAAA,KAAK,EAAE,KAAKL,KAAL,CAAWK,KAAX,GAAmB;AADd,WAAd;AAIA,cAAIE,MAAM,GAAGR,SAAS,CAACA,SAAS,CAACS,MAAV,GAAmB,CAApB,CAAtB;AACA,cAAIC,MAAM,GAAGX,GAAG,CAACH,IAAjB;AACA,cAAIe,QAAQ,GAAG,CAAf;AACDC,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBN,MAAzB,EATD,CAUA;;AACEK,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,MAA/B;AACAI,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,MAA7B;;AAEA,cAAIH,MAAM,IAAI,CAAd,EAAiB;AACfK,YAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CN,MAA3C;AACAP,YAAAA,SAAS,IAAID,GAAG,CAACH,IAAjB;AACA,iBAAKS,QAAL,CAAc;AACZH,cAAAA,KAAK,EAAEF,SADK;AAEZc,cAAAA,cAAc,EAAE;AAFJ,aAAd;AAID,WAPD,MAOO,IAAIP,MAAM,KAAK,CAAX,IAAgB,CAACQ,MAAM,CAACC,SAAP,CAAiBC,QAAQ,CAACT,MAAD,CAAzB,CAArB,EAAyD;AAC9DI,YAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ,EAAwDN,MAAxD;;AAEA,gBAAMC,MAAM,KAAK,GAAX,IAAkBE,MAAM,KAAI,GAA7B,IAAsCF,MAAM,KAAK,GAAX,IAAkBE,MAAM,KAAI,GAAlE,IAA4EF,MAAM,KAAKE,MAA5F,EAAqG;AACnGE,cAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBL,MAAzB;AACA,oBAAMU,QAAQ,GAAGlB,SAAS,CAACmB,KAAV,CAAgB,CAAhB,EAAmBnB,SAAS,CAACS,MAAV,GAAmB,CAAtC,CAAjB;AACAT,cAAAA,SAAS,GAAGkB,QAAZ;AACAlB,cAAAA,SAAS,IAAID,GAAG,CAACH,IAAjB;AAED,aAND,MAMK;AACHI,cAAAA,SAAS,IAAID,GAAG,CAACH,IAAjB;AACAe,cAAAA,QAAQ,GAAG,CAAX;AACD;;AACD,iBAAKN,QAAL,CAAc;AACZH,cAAAA,KAAK,EAAEF,SADK;AAEZc,cAAAA,cAAc,EAAE,KAFJ;AAGZR,cAAAA,KAAK,EAAE,KAAKL,KAAL,CAAWK,KAAX,GAAmBK;AAHd,aAAd;AAKD,WAlBM,MAkBA,IAAIJ,MAAM,KAAK,CAAf,EAAkB;AACvBK,YAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ,EAAyDN,MAAzD;;AACC,gBAAGQ,MAAM,CAACC,SAAP,CAAiBC,QAAQ,CAACP,MAAD,CAAzB,CAAH,EAAsC;AACpCE,cAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,aAFD,MAEK;AACHD,cAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,oBAAMK,QAAQ,GAAGlB,SAAS,CAACmB,KAAV,CAAgB,CAAhB,EAAmBnB,SAAS,CAACS,MAAV,GAAmB,CAAtC,CAAjB;AACAT,cAAAA,SAAS,GAAGkB,QAAZ;AACAlB,cAAAA,SAAS,IAAID,GAAG,CAACH,IAAjB;AACA,mBAAKS,QAAL,CAAc;AACbH,gBAAAA,KAAK,EAAEF,SADM;AAEbc,gBAAAA,cAAc,EAAE,KAFH;AAGbR,gBAAAA,KAAK,EAAE;AAHM,eAAd;AAMD;AAGH,WAlBM,MAkBA,IAAIC,MAAM,GAAG,CAAb,EAAgB;AACrBK,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCN,MAAtC;AACD;;AAGD;;AACF,aAAKR,GAAG,CAACF,IAAJ,KAAa,OAAlB;AACE,eAAKQ,QAAL,CAAc;AACZH,YAAAA,KAAK,EAAE,GADK;AAEZE,YAAAA,MAAM,EAAE,GAFI;AAGZE,YAAAA,KAAK,EAAE,CAHK;AAIZQ,YAAAA,cAAc,EAAE;AAJJ,WAAd;AAMA;;AACF,aAAKf,GAAG,CAACF,IAAJ,KAAa,OAAlB;AACE,gBAAMuB,UAAU,GAAGC,IAAI,CAACrB,SAAD,CAAvB;AACA,eAAKK,QAAL,CAAc;AACZH,YAAAA,KAAK,EAAEkB,UADK;AAEZhB,YAAAA,MAAM,EAAEgB,UAFI;AAGZd,YAAAA,KAAK,EAAE,CAHK;AAIZQ,YAAAA,cAAc,EAAE;AAJJ,WAAd;AAMA;;AACF,aAAKf,GAAG,CAACF,IAAJ,KAAa,SAAlB;AACE,cAAI,CAAC,KAAKI,KAAL,CAAWa,cAAhB,EAAgC;AAC9Bd,YAAAA,SAAS,IAAI,GAAb;AACA,iBAAKK,QAAL,CAAc;AACZH,cAAAA,KAAK,EAAEF,SADK;AAEZc,cAAAA,cAAc,EAAE;AAFJ,aAAd;AAID;;AACD;;AACF;AACE;AAxGJ;AA0GD,KAxHkB;;AAEjB,SAAKb,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,GADI;AAEXE,MAAAA,MAAM,EAAE,GAFG;AAGXE,MAAAA,KAAK,EAAE,CAHI;AAIXQ,MAAAA,cAAc,EAAE;AAJL,KAAb;AAMD;;AAkHDQ,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,oBAAC,OAAD;AAAS,MAAA,MAAM,EAAE,KAAKrB,KAAL,CAAWG,MAA5B;AAAoC,MAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,MAAD;AACE,MAAA,OAAO,EAAE,KAAKR,aADhB;AAEE,MAAA,uBAAuB,EAAE,KAAKI,iBAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF,CADF,CADF;AAcD;;AA9J+B;;AAkKlC,eAAeR,GAAf","sourcesContent":["import React from 'react'\r\nimport Display from './components/display';\r\nimport Keypad from './components/keypad'\r\n\r\n  class App extends React.Component {\r\n    buttonsObject = [\r\n      { id: \"one\", name: \"1\", type: \"number\" },\r\n      { id: \"two\", name: \"2\", type: \"number\" },\r\n      { id: \"three\", name: \"3\", type: \"number\" },\r\n      { id: \"four\", name: \"4\", type: \"number\" },\r\n      { id: \"five\", name: \"5\", type: \"number\" },\r\n      { id: \"six\", name: \"6\", type: \"number\" },\r\n      { id: \"seven\", name: \"7\", type: \"number\" },\r\n      { id: \"eight\", name: \"8\", type: \"number\" },\r\n      { id: \"nine\", name: \"9\", type: \"number\" },\r\n      { id: \"zero\", name: \"0\", type: \"number\" },\r\n      { id: \"decimal\", name: \".\", type: \"decimal\" },\r\n      { id: \"add\", name: \"+\", type: \"operator\" },\r\n      { id: \"subtract\", name: \"-\", type: \"operator\" },\r\n      { id: \"multiply\", name: \"*\", type: \"operator\" },\r\n      { id: \"divide\", name: \"/\", type: \"operator\" },\r\n      { id: \"clear\", name: \"C\", type: \"clear\" },\r\n      { id: \"equals\", name: \"=\", type: \"equal\" }\r\n    ];\r\n  \r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        input: \"0\",\r\n        result: \"0\",\r\n        numOp: 0,\r\n        decimalClicked: false\r\n      };\r\n    }\r\n  \r\n    handleButtonClick = btn => {\r\n      let currInput = this.state.input;\r\n      let currResult = this.state.result;\r\n  \r\n      switch (true) {\r\n        case btn.type === \"number\":\r\n          if (currInput !== \"0\") {\r\n            currInput += btn.name;\r\n            this.setState({\r\n              input: currInput,\r\n              numOp: 0\r\n            });\r\n          } else {\r\n            this.setState({\r\n              input: btn.name,\r\n            });\r\n          }\r\n          break;\r\n        case btn.type === \"operator\":\r\n          let numOps = this.state.numOp;\r\n          this.setState({\r\n            numOp: this.state.numOp + 1\r\n          });\r\n  \r\n          let prevOp = currInput[currInput.length - 1];\r\n          let currOp = btn.name;\r\n          let replaced = 0;\r\n         console.log(\" NumOp is\", numOps);\r\n        //  console.log(\"Current NumOp is\", this.state.numOp);\r\n          console.log(\"previous op was\", prevOp);\r\n          console.log(\"current op is\", currOp);\r\n  \r\n          if (numOps <= 0) {\r\n            console.log(\"num op is <= 0, just append\", numOps);\r\n            currInput += btn.name;\r\n            this.setState({\r\n              input: currInput,\r\n              decimalClicked: false\r\n            });\r\n          } else if (numOps === 1 && !Number.isInteger(parseInt(prevOp))) {\r\n            console.log(\"num op is == 1, do condition and replace\", numOps);\r\n            \r\n            if ( (prevOp === \"-\" && currOp !==\"-\") || (prevOp !== \"-\" && currOp !==\"-\" ) || (prevOp === currOp)) {\r\n              console.log('replace!!', prevOp)\r\n              const newInput = currInput.slice(0, currInput.length - 1);\r\n              currInput = newInput;\r\n              currInput += btn.name;\r\n              \r\n            }else{\r\n              currInput += btn.name;    \r\n              replaced = 1;\r\n            }\r\n            this.setState({\r\n              input: currInput,\r\n              decimalClicked: false,\r\n              numOp: this.state.numOp + replaced\r\n            });\r\n          } else if (numOps === 2) {\r\n            console.log(\"num op is === 2, do condition and replace\", numOps);\r\n             if(Number.isInteger(parseInt(currOp))){\r\n               console.log(\"number\");\r\n             }else{\r\n               console.log(\"not number, replacing !!\");\r\n               const newInput = currInput.slice(0, currInput.length - 2);\r\n               currInput = newInput;\r\n               currInput += btn.name;\r\n               this.setState({\r\n                input: currInput,\r\n                decimalClicked: false,\r\n                numOp: 1\r\n              });\r\n  \r\n             }\r\n  \r\n  \r\n          } else if (numOps > 2) {\r\n            console.log(\"num op is > 2 replace \", numOps);\r\n          }\r\n    \r\n  \r\n          break;\r\n        case btn.type === \"clear\":\r\n          this.setState({\r\n            input: \"0\",\r\n            result: \"0\",\r\n            numOp: 0,\r\n            decimalClicked: false\r\n          });\r\n          break;\r\n        case btn.type === \"equal\":\r\n          const evilResult = eval(currInput);\r\n          this.setState({\r\n            input: evilResult,\r\n            result: evilResult,\r\n            numOp: 0,\r\n            decimalClicked: false\r\n          });\r\n          break;\r\n        case btn.type === \"decimal\":\r\n          if (!this.state.decimalClicked) {\r\n            currInput += \".\";\r\n            this.setState({\r\n              input: currInput,\r\n              decimalClicked: true\r\n            });\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"container\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <h3 className=\"text-center\">Calculator</h3>\r\n              <Display result={this.state.result} input={this.state.input} />\r\n              <Keypad\r\n                buttons={this.buttonsObject}\r\n                handleButtonClickParent={this.handleButtonClick}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  \r\n  export default App;"]},"metadata":{},"sourceType":"module"}